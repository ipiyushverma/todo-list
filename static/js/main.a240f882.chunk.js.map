{"version":3,"sources":["components/item.js","components/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Item","props","className","type","value","checked","task","completed","onChange","updateStatus","id","dummy","Todo","useState","tasks","setTasks","newTask","setNewTask","expand","setExpand","changeStatus","updatedTasks","i","length","push","map","placeholder","e","target","onClick","class","UpOutlined","style","fontSize","DownOutlined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAyBeA,MAvBf,SAAcC,GACZ,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,cAAf,UACE,uBACEA,UAAU,mBACVC,KAAK,WACLC,MAAM,GACNC,QAASJ,EAAMK,KAAKC,UACpBC,SAAU,kBAAIP,EAAMQ,aAAaR,EAAMK,KAAKI,OAE7CT,EAAMK,KAAKC,UACV,iCACGN,EAAMK,KAAKA,OAGd,gCAAQL,EAAMK,KAAKA,a,gBCdvBK,EAAQ,CACZ,CAAED,GAAI,EAAGJ,KAAM,QAASC,WAAW,GACnC,CAAEG,GAAI,EAAGJ,KAAM,QAASC,WAAW,GACnC,CAAEG,GAAI,EAAGJ,KAAM,QAASC,WAAW,GACnC,CAAEG,GAAI,EAAGJ,KAAM,QAASC,WAAW,GACnC,CAAEG,GAAI,EAAGJ,KAAM,QAASC,WAAW,IA8FtBK,MA3Ff,WACE,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAUMC,EAAe,SAACV,GAGpB,IAFA,IAAIW,EAAe,GAEVC,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAC5BR,EAAMQ,GAAGZ,KAAOA,EAClBW,EAAaG,KAAb,2BAAuBV,EAAMQ,IAA7B,IAAiCf,WAAYO,EAAMQ,GAAGf,aAEtDc,EAAaG,KAAb,eAAuBV,EAAMQ,KAGjCP,EAASM,IAGX,OACE,sBAAKnB,UAAU,WAAf,UACE,gCACE,oBAAIA,UAAU,eAAd,2BACCY,EAAMW,KAAI,SAACnB,GACV,IAAKA,EAAKC,UACR,OACE,cAAC,EAAD,CACED,KAAMA,EACNH,KAAK,UAELM,aAAcW,GADTd,EAAKI,OAQlB,sBAAKR,UAAU,kCAAf,UACE,uBACEC,KAAK,OACLD,UAAU,eACV,aAAW,QACX,mBAAiB,uBACjBwB,YAAY,iBACZlB,SAAU,SAACmB,GAAD,OAAOV,EAAWU,EAAEC,OAAOxB,QACrCA,MAAOY,IAET,qBAAKd,UAAU,sBAAf,SACE,wBAAQC,KAAK,SAASD,UAAU,kBAAkB2B,QAlD5C,WACdd,EAAS,GAAD,mBACHD,GADG,CAEN,CAAEJ,GAAII,EAAMS,OAAS,EAAGjB,KAAMU,EAAST,WAAW,MAEpDU,EAAW,KA6CH,yBAMN,uBACA,gCACE,sBAAKa,MAAM,WAAWD,QAAS,kBAAMV,GAAWD,IAAhD,UACEA,EAGE,cAACa,EAAA,EAAD,CAAY7B,UAAU,OAAO8B,MAAO,CAACC,SAAS,UAF9C,cAACC,EAAA,EAAD,CAAchC,UAAU,OAAO8B,MAAO,CAACC,SAAS,UAIlD,oBAAI/B,UAAU,eAAd,gCAGDgB,GACCJ,EAAMW,KAAI,SAACnB,GACT,GAAIA,EAAKC,UACP,OACE,cAAC,EAAD,CACED,KAAMA,EACNH,KAAK,UAELM,aAAcW,GADTd,EAAKI,c,MC9EbyB,MATf,WACE,OACE,sBAAKjC,UAAU,MAAf,UACE,oBAAIA,UAAU,eAAd,uBACA,cAAC,EAAD,QCGSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a240f882.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Item(props) {\n  return (\n    <div className=\"item-list\">\n      <div className=\"form-check \">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          value=\"\"\n          checked={props.task.completed}\n          onChange={()=>props.updateStatus(props.task.id)}\n        />\n        {props.task.completed ? (\n          <strike>\n            {props.task.task}\n          </strike>\n        ) : (\n          <label>{props.task.task}</label>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Item;\n","import React, { useState } from \"react\";\nimport Item from \"./item\";\nimport { DownOutlined, UpOutlined } from \"@ant-design/icons\";\n\nconst dummy = [\n  { id: 1, task: \"Item1\", completed: false },\n  { id: 2, task: \"Item2\", completed: false },\n  { id: 3, task: \"Item3\", completed: false },\n  { id: 4, task: \"Item4\", completed: false },\n  { id: 5, task: \"Item5\", completed: true },\n];\n\nfunction Todo() {\n  const [tasks, setTasks] = useState(dummy);\n  const [newTask, setNewTask] = useState(\"\");\n\n  const [expand, setExpand] = useState(false);\n\n  const addTask = () => {\n    setTasks([\n      ...tasks,\n      { id: tasks.length + 1, task: newTask, completed: false },\n    ]);\n    setNewTask(\"\");\n  };\n\n  const changeStatus = (id) => {\n    let updatedTasks = [];\n\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks[i].id === id) {\n        updatedTasks.push({ ...tasks[i], completed: !tasks[i].completed });\n      } else {\n        updatedTasks.push({ ...tasks[i] });\n      }\n    }\n    setTasks(updatedTasks);\n  };\n\n  return (\n    <div className=\"main-div\">\n      <div>\n        <h5 className=\"task-heading\">Pending Tasks</h5>\n        {tasks.map((task) => {\n          if (!task.completed) {\n            return (\n              <Item\n                task={task}\n                type=\"pending\"\n                key={task.id}\n                updateStatus={changeStatus}\n              />\n            );\n          }\n        })}\n\n        {/* input field for adding a task */}\n        <div className=\"input-group input-group-sm mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            aria-label=\"Small\"\n            aria-describedby=\"inputGroup-sizing-sm\"\n            placeholder=\"Add a new task\"\n            onChange={(e) => setNewTask(e.target.value)}\n            value={newTask}\n          />\n          <div className=\"input-group-prepend\">\n            <button type=\"button\" className=\"btn btn-primary\" onClick={addTask}>\n              Add\n            </button>\n          </div>\n        </div>\n      </div>\n      <hr></hr>\n      <div>\n        <div class=\"dropdown\" onClick={() => setExpand(!expand)}>\n        {!expand ? (\n            <DownOutlined className=\"icon\" style={{fontSize:\"13px\"}} />\n          ) : (\n            <UpOutlined className=\"icon\" style={{fontSize:\"13px\"}}/>\n          )}\n          <h5 className=\"task-heading\">Completed Tasks</h5>\n          \n        </div>\n        {expand &&\n          tasks.map((task) => {\n            if (task.completed) {\n              return (\n                <Item\n                  task={task}\n                  type=\"pending\"\n                  key={task.id}\n                  updateStatus={changeStatus}\n                />\n              );\n            }\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n","\nimport \"./App.css\";\nimport Todo from \"./components/todo\";\nimport \"./components/style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"main-heading\">Todo list</h1>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}